/** @format */

var INCORRECT_ACTIONS_PARAMETER_TYPE = new Error(
  "The «actions» parameter must be an object."
);

var INCORRECT_NAME_PARAMETER_TYPE = new Error(
  "The «name» parameter must be a filled string."
);

var SYSTEM_HANDLERS = {
  REQUEST: "REQUEST",
  PROCESS: "PROCESS",
  SUCCESS: "SUCCESS",
  FAILURE: "FAILURE",
  HANDLER: undefined
};

/**
 * The helper that checks if an element is a valid object.
 * @param {any} element - an element for checking.
 * @return {boolean} whether an element is a valid object.
 */
function isObject(element) {
  return typeof element === "object" && element !== null;
}

/**
 * The function for dispatching.
 * @param {string} type - a type of action.
 * @param {!Object} content - a content of action.
 *
 * @return {Object} an action object.
 * @property {string} type - a type of action.
 * @property {Object} content - a content of action.
 */
function action(type, content) {
  return {
    type: type || "",
    content: isObject(content) ? content : {}
  };
}

/**
 * The function that creates an action-constant.
 * @param {string} entrypoint - an entrypoint of action-constant.
 * @param {!Object} [schema] an action-constant schema.
 * @throws {INCORRECT_NAME_PARAMETER_TYPE} throw the error when «name» parameter is not an filled string.
 * @return {Object} an action-constant.
 */
function createActionConstant(entrypoint, schema) {
  if (typeof entrypoint !== "string") {
    throw INCORRECT_NAME_PARAMETER_TYPE;
  }

  var constName = entrypoint.trim().toUpperCase();
  var constants = isObject(schema) ? schema : {};
  var constant = {};

  if (constName.length === 0) {
    throw INCORRECT_NAME_PARAMETER_TYPE;
  }

  for (var prop in constants) {
    var key = prop.trim().toUpperCase();
    var kindName = constName.concat(".", key);
    var kindSchema = constants[prop];

    constant[key] = createActionConstant(kindName, kindSchema);
  }

  for (var prop in SYSTEM_HANDLERS) {
    constant[prop] =
      SYSTEM_HANDLERS[prop] !== undefined
        ? constName.concat(".", SYSTEM_HANDLERS[prop])
        : undefined;
  }

  return constant;
}

/**
 * The function that creates actions from action-constants.
 * @param {!Object} actions - an object with action-constants.
 * @throws {INCORRECT_ACTIONS_PARAMETER_TYPE} throw the error when «actions» parameter is not an object or null.
 * @return {Object} handled action-constants.
 */
function createActions(actions) {
  if (typeof actions !== "object" || actions === null) {
    throw INCORRECT_ACTIONS_PARAMETER_TYPE;
  }

  var handlers = {};

  for (var prop in actions) {
    handlers[prop] = actions[prop].HANDLER =
      typeof actions[prop].HANDLER !== "function"
        ? action.bind(undefined, actions[prop].REQUEST)
        : actions[prop].HANDLER;
  }

  return handlers;
}

module.exports = {
  createActionConstant: createActionConstant,
  createActions: createActions
};
